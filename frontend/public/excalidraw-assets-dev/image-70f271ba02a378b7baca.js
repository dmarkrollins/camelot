"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkExcalidraw"] = globalThis["webpackChunkExcalidraw"] || []).push([["image"],{

/***/ "../../data/encode.ts":
/*!****************************!*\
  !*** ../../data/encode.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toByteString\": () => (/* binding */ toByteString),\n/* harmony export */   \"stringToBase64\": () => (/* binding */ stringToBase64),\n/* harmony export */   \"base64ToString\": () => (/* binding */ base64ToString),\n/* harmony export */   \"encode\": () => (/* binding */ encode),\n/* harmony export */   \"decode\": () => (/* binding */ decode),\n/* harmony export */   \"compressData\": () => (/* binding */ compressData),\n/* harmony export */   \"decompressData\": () => (/* binding */ decompressData)\n/* harmony export */ });\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pako */ \"../../../node_modules/pako/index.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pako__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _encryption__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encryption */ \"../../data/encryption.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n// -----------------------------------------------------------------------------\n// byte (binary) strings\n// -----------------------------------------------------------------------------\n// fast, Buffer-compatible implem\nconst toByteString = (data) => {\n    return new Promise((resolve, reject) => {\n        const blob = typeof data === \"string\"\n            ? new Blob([new TextEncoder().encode(data)])\n            : new Blob([data instanceof Uint8Array ? data : new Uint8Array(data)]);\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            if (!event.target || typeof event.target.result !== \"string\") {\n                return reject(new Error(\"couldn't convert to byte string\"));\n            }\n            resolve(event.target.result);\n        };\n        reader.readAsBinaryString(blob);\n    });\n};\nconst byteStringToArrayBuffer = (byteString) => {\n    const buffer = new ArrayBuffer(byteString.length);\n    const bufferView = new Uint8Array(buffer);\n    for (let i = 0, len = byteString.length; i < len; i++) {\n        bufferView[i] = byteString.charCodeAt(i);\n    }\n    return buffer;\n};\nconst byteStringToString = (byteString) => {\n    return new TextDecoder(\"utf-8\").decode(byteStringToArrayBuffer(byteString));\n};\n// -----------------------------------------------------------------------------\n// base64\n// -----------------------------------------------------------------------------\n/**\n * @param isByteString set to true if already byte string to prevent bloat\n *  due to reencoding\n */\nconst stringToBase64 = (str, isByteString = false) => __awaiter(void 0, void 0, void 0, function* () {\n    return isByteString ? window.btoa(str) : window.btoa(yield toByteString(str));\n});\n// async to align with stringToBase64\nconst base64ToString = (base64, isByteString = false) => __awaiter(void 0, void 0, void 0, function* () {\n    return isByteString\n        ? window.atob(base64)\n        : byteStringToString(window.atob(base64));\n});\n/**\n * Encodes (and potentially compresses via zlib) text to byte string\n */\nconst encode = ({ text, compress, }) => __awaiter(void 0, void 0, void 0, function* () {\n    let deflated;\n    if (compress !== false) {\n        try {\n            deflated = yield toByteString((0,pako__WEBPACK_IMPORTED_MODULE_0__.deflate)(text));\n        }\n        catch (error) {\n            console.error(\"encode: cannot deflate\", error);\n        }\n    }\n    return {\n        version: \"1\",\n        encoding: \"bstring\",\n        compressed: !!deflated,\n        encoded: deflated || (yield toByteString(text)),\n    };\n});\nconst decode = (data) => __awaiter(void 0, void 0, void 0, function* () {\n    let decoded;\n    switch (data.encoding) {\n        case \"bstring\":\n            // if compressed, do not double decode the bstring\n            decoded = data.compressed\n                ? data.encoded\n                : yield byteStringToString(data.encoded);\n            break;\n        default:\n            throw new Error(`decode: unknown encoding \"${data.encoding}\"`);\n    }\n    if (data.compressed) {\n        return (0,pako__WEBPACK_IMPORTED_MODULE_0__.inflate)(new Uint8Array(byteStringToArrayBuffer(decoded)), {\n            to: \"string\",\n        });\n    }\n    return decoded;\n});\n// -----------------------------------------------------------------------------\nconst CONCAT_BUFFERS_VERSION = 1;\n/** how many bytes we use to encode how many bytes the next chunk has.\n * Corresponds to DataView setter methods (setUint32, setUint16, etc).\n *\n * NOTE ! values must not be changed, which would be backwards incompatible !\n */\nconst VERSION_DATAVIEW_BYTES = 4;\nconst NEXT_CHUNK_SIZE_DATAVIEW_BYTES = 4;\n// -----------------------------------------------------------------------------\nconst DATA_VIEW_BITS_MAP = { 1: 8, 2: 16, 4: 32 };\n/**\n * abstraction over DataView that serves as a typed getter/setter in case\n * you're using constants for the byte size and want to ensure there's no\n * discrepenancy in the encoding across refactors.\n *\n * DataView serves for an endian-agnostic handling of numbers in ArrayBuffers.\n */\nfunction dataView(buffer, bytes, offset, value) {\n    if (value != null) {\n        if (value > Math.pow(2, DATA_VIEW_BITS_MAP[bytes]) - 1) {\n            throw new Error(`attempting to set value higher than the allocated bytes (value: ${value}, bytes: ${bytes})`);\n        }\n        const method = `setUint${DATA_VIEW_BITS_MAP[bytes]}`;\n        new DataView(buffer.buffer)[method](offset, value);\n        return buffer;\n    }\n    const method = `getUint${DATA_VIEW_BITS_MAP[bytes]}`;\n    return new DataView(buffer.buffer)[method](offset);\n}\n// -----------------------------------------------------------------------------\n/**\n * Resulting concatenated buffer has this format:\n *\n * [\n *   VERSION chunk (4 bytes)\n *   LENGTH chunk 1 (4 bytes)\n *   DATA chunk 1 (up to 2^32 bits)\n *   LENGTH chunk 2 (4 bytes)\n *   DATA chunk 2 (up to 2^32 bits)\n *   ...\n * ]\n *\n * @param buffers each buffer (chunk) must be at most 2^32 bits large (~4GB)\n */\nconst concatBuffers = (...buffers) => {\n    const bufferView = new Uint8Array(VERSION_DATAVIEW_BYTES +\n        NEXT_CHUNK_SIZE_DATAVIEW_BYTES * buffers.length +\n        buffers.reduce((acc, buffer) => acc + buffer.byteLength, 0));\n    let cursor = 0;\n    // as the first chunk we'll encode the version for backwards compatibility\n    dataView(bufferView, VERSION_DATAVIEW_BYTES, cursor, CONCAT_BUFFERS_VERSION);\n    cursor += VERSION_DATAVIEW_BYTES;\n    for (const buffer of buffers) {\n        dataView(bufferView, NEXT_CHUNK_SIZE_DATAVIEW_BYTES, cursor, buffer.byteLength);\n        cursor += NEXT_CHUNK_SIZE_DATAVIEW_BYTES;\n        bufferView.set(buffer, cursor);\n        cursor += buffer.byteLength;\n    }\n    return bufferView;\n};\n/** can only be used on buffers created via `concatBuffers()` */\nconst splitBuffers = (concatenatedBuffer) => {\n    const buffers = [];\n    let cursor = 0;\n    // first chunk is the version\n    const version = dataView(concatenatedBuffer, NEXT_CHUNK_SIZE_DATAVIEW_BYTES, cursor);\n    // If version is outside of the supported versions, throw an error.\n    // This usually means the buffer wasn't encoded using this API, so we'd only\n    // waste compute.\n    if (version > CONCAT_BUFFERS_VERSION) {\n        throw new Error(`invalid version ${version}`);\n    }\n    cursor += VERSION_DATAVIEW_BYTES;\n    while (true) {\n        const chunkSize = dataView(concatenatedBuffer, NEXT_CHUNK_SIZE_DATAVIEW_BYTES, cursor);\n        cursor += NEXT_CHUNK_SIZE_DATAVIEW_BYTES;\n        buffers.push(concatenatedBuffer.slice(cursor, cursor + chunkSize));\n        cursor += chunkSize;\n        if (cursor >= concatenatedBuffer.byteLength) {\n            break;\n        }\n    }\n    return buffers;\n};\n// helpers for (de)compressing data with JSON metadata including encryption\n// -----------------------------------------------------------------------------\n/** @private */\nconst _encryptAndCompress = (data, encryptionKey) => __awaiter(void 0, void 0, void 0, function* () {\n    const { encryptedBuffer, iv } = yield (0,_encryption__WEBPACK_IMPORTED_MODULE_1__.encryptData)(encryptionKey, (0,pako__WEBPACK_IMPORTED_MODULE_0__.deflate)(data));\n    return { iv, buffer: new Uint8Array(encryptedBuffer) };\n});\n/**\n * The returned buffer has following format:\n * `[]` refers to a buffers wrapper (see `concatBuffers`)\n *\n * [\n *   encodingMetadataBuffer,\n *   iv,\n *   [\n *      contentsMetadataBuffer\n *      contentsBuffer\n *   ]\n * ]\n */\nconst compressData = (dataBuffer, options) => __awaiter(void 0, void 0, void 0, function* () {\n    const fileInfo = {\n        version: 2,\n        compression: \"pako@1\",\n        encryption: \"AES-GCM\",\n    };\n    const encodingMetadataBuffer = new TextEncoder().encode(JSON.stringify(fileInfo));\n    const contentsMetadataBuffer = new TextEncoder().encode(JSON.stringify(options.metadata || null));\n    const { iv, buffer } = yield _encryptAndCompress(concatBuffers(contentsMetadataBuffer, dataBuffer), options.encryptionKey);\n    return concatBuffers(encodingMetadataBuffer, iv, buffer);\n});\n/** @private */\nconst _decryptAndDecompress = (iv, decryptedBuffer, decryptionKey, isCompressed) => __awaiter(void 0, void 0, void 0, function* () {\n    decryptedBuffer = new Uint8Array(yield (0,_encryption__WEBPACK_IMPORTED_MODULE_1__.decryptData)(iv, decryptedBuffer, decryptionKey));\n    if (isCompressed) {\n        return (0,pako__WEBPACK_IMPORTED_MODULE_0__.inflate)(decryptedBuffer);\n    }\n    return decryptedBuffer;\n});\nconst decompressData = (bufferView, options) => __awaiter(void 0, void 0, void 0, function* () {\n    // first chunk is encoding metadata (ignored for now)\n    const [encodingMetadataBuffer, iv, buffer] = splitBuffers(bufferView);\n    const encodingMetadata = JSON.parse(new TextDecoder().decode(encodingMetadataBuffer));\n    try {\n        const [contentsMetadataBuffer, contentsBuffer] = splitBuffers(yield _decryptAndDecompress(iv, buffer, options.decryptionKey, !!encodingMetadata.compression));\n        const metadata = JSON.parse(new TextDecoder().decode(contentsMetadataBuffer));\n        return {\n            /** metadata source is always JSON so we can decode it here */\n            metadata,\n            /** data can be anything so the caller must decode it */\n            data: contentsBuffer,\n        };\n    }\n    catch (error) {\n        console.error(`Error during decompressing and decrypting the file.`, encodingMetadata);\n        throw error;\n    }\n});\n// -----------------------------------------------------------------------------\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../data/encode.ts\n");

/***/ }),

/***/ "../../data/encryption.ts":
/*!********************************!*\
  !*** ../../data/encryption.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IV_LENGTH_BYTES\": () => (/* binding */ IV_LENGTH_BYTES),\n/* harmony export */   \"createIV\": () => (/* binding */ createIV),\n/* harmony export */   \"generateEncryptionKey\": () => (/* binding */ generateEncryptionKey),\n/* harmony export */   \"getCryptoKey\": () => (/* binding */ getCryptoKey),\n/* harmony export */   \"encryptData\": () => (/* binding */ encryptData),\n/* harmony export */   \"decryptData\": () => (/* binding */ decryptData)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"../../constants.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nconst IV_LENGTH_BYTES = 12;\nconst createIV = () => {\n    const arr = new Uint8Array(IV_LENGTH_BYTES);\n    return window.crypto.getRandomValues(arr);\n};\nconst generateEncryptionKey = (returnAs) => __awaiter(void 0, void 0, void 0, function* () {\n    const key = yield window.crypto.subtle.generateKey({\n        name: \"AES-GCM\",\n        length: _constants__WEBPACK_IMPORTED_MODULE_0__.ENCRYPTION_KEY_BITS,\n    }, true, // extractable\n    [\"encrypt\", \"decrypt\"]);\n    return (returnAs === \"cryptoKey\"\n        ? key\n        : (yield window.crypto.subtle.exportKey(\"jwk\", key)).k);\n});\nconst getCryptoKey = (key, usage) => window.crypto.subtle.importKey(\"jwk\", {\n    alg: \"A128GCM\",\n    ext: true,\n    k: key,\n    key_ops: [\"encrypt\", \"decrypt\"],\n    kty: \"oct\",\n}, {\n    name: \"AES-GCM\",\n    length: _constants__WEBPACK_IMPORTED_MODULE_0__.ENCRYPTION_KEY_BITS,\n}, false, // extractable\n[usage]);\nconst encryptData = (key, data) => __awaiter(void 0, void 0, void 0, function* () {\n    const importedKey = typeof key === \"string\" ? yield getCryptoKey(key, \"encrypt\") : key;\n    const iv = createIV();\n    const buffer = typeof data === \"string\"\n        ? new TextEncoder().encode(data)\n        : data instanceof Uint8Array\n            ? data\n            : data instanceof Blob\n                ? yield data.arrayBuffer()\n                : data;\n    // We use symmetric encryption. AES-GCM is the recommended algorithm and\n    // includes checks that the ciphertext has not been modified by an attacker.\n    const encryptedBuffer = yield window.crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv,\n    }, importedKey, buffer);\n    return { encryptedBuffer, iv };\n});\nconst decryptData = (iv, encrypted, privateKey) => __awaiter(void 0, void 0, void 0, function* () {\n    const key = yield getCryptoKey(privateKey, \"decrypt\");\n    return window.crypto.subtle.decrypt({\n        name: \"AES-GCM\",\n        iv,\n    }, key, encrypted);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBQ3RELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUNqQztRQUNFLElBQUksRUFBRSxTQUFTO1FBQ2YsRUFBRTtLQUNILEVBQ0QsR0FBRyxFQUNILFNBQVMsQ0FDVixDQUFDO0FBQ0osQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL2RhdGEvZW5jcnlwdGlvbi50cz9hZDMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVOQ1JZUFRJT05fS0VZX0JJVFMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBJVl9MRU5HVEhfQllURVMgPSAxMjtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUlWID0gKCkgPT4ge1xuICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShJVl9MRU5HVEhfQllURVMpO1xuICByZXR1cm4gd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUVuY3J5cHRpb25LZXkgPSBhc3luYyA8XG4gIFQgZXh0ZW5kcyBcInN0cmluZ1wiIHwgXCJjcnlwdG9LZXlcIiA9IFwic3RyaW5nXCIsXG4+KFxuICByZXR1cm5Bcz86IFQsXG4pOiBQcm9taXNlPFQgZXh0ZW5kcyBcImNyeXB0b0tleVwiID8gQ3J5cHRvS2V5IDogc3RyaW5nPiA9PiB7XG4gIGNvbnN0IGtleSA9IGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KFxuICAgIHtcbiAgICAgIG5hbWU6IFwiQUVTLUdDTVwiLFxuICAgICAgbGVuZ3RoOiBFTkNSWVBUSU9OX0tFWV9CSVRTLFxuICAgIH0sXG4gICAgdHJ1ZSwgLy8gZXh0cmFjdGFibGVcbiAgICBbXCJlbmNyeXB0XCIsIFwiZGVjcnlwdFwiXSxcbiAgKTtcbiAgcmV0dXJuIChcbiAgICByZXR1cm5BcyA9PT0gXCJjcnlwdG9LZXlcIlxuICAgICAgPyBrZXlcbiAgICAgIDogKGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmV4cG9ydEtleShcImp3a1wiLCBrZXkpKS5rXG4gICkgYXMgVCBleHRlbmRzIFwiY3J5cHRvS2V5XCIgPyBDcnlwdG9LZXkgOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q3J5cHRvS2V5ID0gKGtleTogc3RyaW5nLCB1c2FnZTogS2V5VXNhZ2UpID0+XG4gIHdpbmRvdy5jcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICBcImp3a1wiLFxuICAgIHtcbiAgICAgIGFsZzogXCJBMTI4R0NNXCIsXG4gICAgICBleHQ6IHRydWUsXG4gICAgICBrOiBrZXksXG4gICAgICBrZXlfb3BzOiBbXCJlbmNyeXB0XCIsIFwiZGVjcnlwdFwiXSxcbiAgICAgIGt0eTogXCJvY3RcIixcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6IFwiQUVTLUdDTVwiLFxuICAgICAgbGVuZ3RoOiBFTkNSWVBUSU9OX0tFWV9CSVRTLFxuICAgIH0sXG4gICAgZmFsc2UsIC8vIGV4dHJhY3RhYmxlXG4gICAgW3VzYWdlXSxcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGVuY3J5cHREYXRhID0gYXN5bmMgKFxuICBrZXk6IHN0cmluZyB8IENyeXB0b0tleSxcbiAgZGF0YTogVWludDhBcnJheSB8IEFycmF5QnVmZmVyIHwgQmxvYiB8IEZpbGUgfCBzdHJpbmcsXG4pOiBQcm9taXNlPHsgZW5jcnlwdGVkQnVmZmVyOiBBcnJheUJ1ZmZlcjsgaXY6IFVpbnQ4QXJyYXkgfT4gPT4ge1xuICBjb25zdCBpbXBvcnRlZEtleSA9XG4gICAgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiA/IGF3YWl0IGdldENyeXB0b0tleShrZXksIFwiZW5jcnlwdFwiKSA6IGtleTtcbiAgY29uc3QgaXYgPSBjcmVhdGVJVigpO1xuICBjb25zdCBidWZmZXI6IEFycmF5QnVmZmVyIHwgVWludDhBcnJheSA9XG4gICAgdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGRhdGEpXG4gICAgICA6IGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5XG4gICAgICA/IGRhdGFcbiAgICAgIDogZGF0YSBpbnN0YW5jZW9mIEJsb2JcbiAgICAgID8gYXdhaXQgZGF0YS5hcnJheUJ1ZmZlcigpXG4gICAgICA6IGRhdGE7XG5cbiAgLy8gV2UgdXNlIHN5bW1ldHJpYyBlbmNyeXB0aW9uLiBBRVMtR0NNIGlzIHRoZSByZWNvbW1lbmRlZCBhbGdvcml0aG0gYW5kXG4gIC8vIGluY2x1ZGVzIGNoZWNrcyB0aGF0IHRoZSBjaXBoZXJ0ZXh0IGhhcyBub3QgYmVlbiBtb2RpZmllZCBieSBhbiBhdHRhY2tlci5cbiAgY29uc3QgZW5jcnlwdGVkQnVmZmVyID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuZW5jcnlwdChcbiAgICB7XG4gICAgICBuYW1lOiBcIkFFUy1HQ01cIixcbiAgICAgIGl2LFxuICAgIH0sXG4gICAgaW1wb3J0ZWRLZXksXG4gICAgYnVmZmVyIGFzIEFycmF5QnVmZmVyIHwgVWludDhBcnJheSxcbiAgKTtcblxuICByZXR1cm4geyBlbmNyeXB0ZWRCdWZmZXIsIGl2IH07XG59O1xuXG5leHBvcnQgY29uc3QgZGVjcnlwdERhdGEgPSBhc3luYyAoXG4gIGl2OiBVaW50OEFycmF5LFxuICBlbmNyeXB0ZWQ6IFVpbnQ4QXJyYXkgfCBBcnJheUJ1ZmZlcixcbiAgcHJpdmF0ZUtleTogc3RyaW5nLFxuKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4gPT4ge1xuICBjb25zdCBrZXkgPSBhd2FpdCBnZXRDcnlwdG9LZXkocHJpdmF0ZUtleSwgXCJkZWNyeXB0XCIpO1xuICByZXR1cm4gd2luZG93LmNyeXB0by5zdWJ0bGUuZGVjcnlwdChcbiAgICB7XG4gICAgICBuYW1lOiBcIkFFUy1HQ01cIixcbiAgICAgIGl2LFxuICAgIH0sXG4gICAga2V5LFxuICAgIGVuY3J5cHRlZCxcbiAgKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../data/encryption.ts\n");

/***/ }),

/***/ "../../data/image.ts":
/*!***************************!*\
  !*** ../../data/image.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getTEXtChunk\": () => (/* binding */ getTEXtChunk),\n/* harmony export */   \"encodePngMetadata\": () => (/* binding */ encodePngMetadata),\n/* harmony export */   \"decodePngMetadata\": () => (/* binding */ decodePngMetadata),\n/* harmony export */   \"encodeSvgMetadata\": () => (/* binding */ encodeSvgMetadata),\n/* harmony export */   \"decodeSvgMetadata\": () => (/* binding */ decodeSvgMetadata)\n/* harmony export */ });\n/* harmony import */ var png_chunks_extract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! png-chunks-extract */ \"../../../node_modules/png-chunks-extract/index.js\");\n/* harmony import */ var png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(png_chunks_extract__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var png_chunk_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! png-chunk-text */ \"../../../node_modules/png-chunk-text/index.js\");\n/* harmony import */ var png_chunks_encode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! png-chunks-encode */ \"../../../node_modules/png-chunks-encode/index.js\");\n/* harmony import */ var png_chunks_encode__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(png_chunks_encode__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _encode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encode */ \"../../data/encode.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants */ \"../../constants.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n// -----------------------------------------------------------------------------\n// PNG\n// -----------------------------------------------------------------------------\nconst blobToArrayBuffer = (blob) => {\n    if (\"arrayBuffer\" in blob) {\n        return blob.arrayBuffer();\n    }\n    // Safari\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            var _a;\n            if (!((_a = event.target) === null || _a === void 0 ? void 0 : _a.result)) {\n                return reject(new Error(\"couldn't convert blob to ArrayBuffer\"));\n            }\n            resolve(event.target.result);\n        };\n        reader.readAsArrayBuffer(blob);\n    });\n};\nconst getTEXtChunk = (blob) => __awaiter(void 0, void 0, void 0, function* () {\n    const chunks = png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default()(new Uint8Array(yield blobToArrayBuffer(blob)));\n    const metadataChunk = chunks.find((chunk) => chunk.name === \"tEXt\");\n    if (metadataChunk) {\n        return png_chunk_text__WEBPACK_IMPORTED_MODULE_1__.decode(metadataChunk.data);\n    }\n    return null;\n});\nconst encodePngMetadata = ({ blob, metadata, }) => __awaiter(void 0, void 0, void 0, function* () {\n    const chunks = png_chunks_extract__WEBPACK_IMPORTED_MODULE_0___default()(new Uint8Array(yield blobToArrayBuffer(blob)));\n    const metadataChunk = png_chunk_text__WEBPACK_IMPORTED_MODULE_1__.encode(_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw, JSON.stringify(yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.encode)({\n        text: metadata,\n        compress: true,\n    })));\n    // insert metadata before last chunk (iEND)\n    chunks.splice(-1, 0, metadataChunk);\n    return new Blob([png_chunks_encode__WEBPACK_IMPORTED_MODULE_2___default()(chunks)], { type: _constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.png });\n});\nconst decodePngMetadata = (blob) => __awaiter(void 0, void 0, void 0, function* () {\n    const metadata = yield getTEXtChunk(blob);\n    if ((metadata === null || metadata === void 0 ? void 0 : metadata.keyword) === _constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw) {\n        try {\n            const encodedData = JSON.parse(metadata.text);\n            if (!(\"encoded\" in encodedData)) {\n                // legacy, un-encoded scene JSON\n                if (\"type\" in encodedData &&\n                    encodedData.type === _constants__WEBPACK_IMPORTED_MODULE_4__.EXPORT_DATA_TYPES.excalidraw) {\n                    return metadata.text;\n                }\n                throw new Error(\"FAILED\");\n            }\n            return yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.decode)(encodedData);\n        }\n        catch (error) {\n            console.error(error);\n            throw new Error(\"FAILED\");\n        }\n    }\n    throw new Error(\"INVALID\");\n});\n// -----------------------------------------------------------------------------\n// SVG\n// -----------------------------------------------------------------------------\nconst encodeSvgMetadata = ({ text }) => __awaiter(void 0, void 0, void 0, function* () {\n    const base64 = yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.stringToBase64)(JSON.stringify(yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.encode)({ text })), true /* is already byte string */);\n    let metadata = \"\";\n    metadata += `<!-- payload-type:${_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw} -->`;\n    metadata += `<!-- payload-version:2 -->`;\n    metadata += \"<!-- payload-start -->\";\n    metadata += base64;\n    metadata += \"<!-- payload-end -->\";\n    return metadata;\n});\nconst decodeSvgMetadata = ({ svg }) => __awaiter(void 0, void 0, void 0, function* () {\n    if (svg.includes(`payload-type:${_constants__WEBPACK_IMPORTED_MODULE_4__.MIME_TYPES.excalidraw}`)) {\n        const match = svg.match(/<!-- payload-start -->(.+?)<!-- payload-end -->/);\n        if (!match) {\n            throw new Error(\"INVALID\");\n        }\n        const versionMatch = svg.match(/<!-- payload-version:(\\d+) -->/);\n        const version = (versionMatch === null || versionMatch === void 0 ? void 0 : versionMatch[1]) || \"1\";\n        const isByteString = version !== \"1\";\n        try {\n            const json = yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.base64ToString)(match[1], isByteString);\n            const encodedData = JSON.parse(json);\n            if (!(\"encoded\" in encodedData)) {\n                // legacy, un-encoded scene JSON\n                if (\"type\" in encodedData &&\n                    encodedData.type === _constants__WEBPACK_IMPORTED_MODULE_4__.EXPORT_DATA_TYPES.excalidraw) {\n                    return json;\n                }\n                throw new Error(\"FAILED\");\n            }\n            return yield (0,_encode__WEBPACK_IMPORTED_MODULE_3__.decode)(encodedData);\n        }\n        catch (error) {\n            console.error(error);\n            throw new Error(\"FAILED\");\n        }\n    }\n    throw new Error(\"INVALID\");\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Oi8vLy4uLy4uL2RhdGEvaW1hZ2UudHM/MjUwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVjb2RlUG5nIGZyb20gXCJwbmctY2h1bmtzLWV4dHJhY3RcIjtcbmltcG9ydCB0RVh0IGZyb20gXCJwbmctY2h1bmstdGV4dFwiO1xuaW1wb3J0IGVuY29kZVBuZyBmcm9tIFwicG5nLWNodW5rcy1lbmNvZGVcIjtcbmltcG9ydCB7IHN0cmluZ1RvQmFzZTY0LCBlbmNvZGUsIGRlY29kZSwgYmFzZTY0VG9TdHJpbmcgfSBmcm9tIFwiLi9lbmNvZGVcIjtcbmltcG9ydCB7IEVYUE9SVF9EQVRBX1RZUEVTLCBNSU1FX1RZUEVTIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUE5HXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBibG9iVG9BcnJheUJ1ZmZlciA9IChibG9iOiBCbG9iKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4gPT4ge1xuICBpZiAoXCJhcnJheUJ1ZmZlclwiIGluIGJsb2IpIHtcbiAgICByZXR1cm4gYmxvYi5hcnJheUJ1ZmZlcigpO1xuICB9XG4gIC8vIFNhZmFyaVxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKCFldmVudC50YXJnZXQ/LnJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcImNvdWxkbid0IGNvbnZlcnQgYmxvYiB0byBBcnJheUJ1ZmZlclwiKSk7XG4gICAgICB9XG4gICAgICByZXNvbHZlKGV2ZW50LnRhcmdldC5yZXN1bHQgYXMgQXJyYXlCdWZmZXIpO1xuICAgIH07XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRURVh0Q2h1bmsgPSBhc3luYyAoXG4gIGJsb2I6IEJsb2IsXG4pOiBQcm9taXNlPHsga2V5d29yZDogc3RyaW5nOyB0ZXh0OiBzdHJpbmcgfSB8IG51bGw+ID0+IHtcbiAgY29uc3QgY2h1bmtzID0gZGVjb2RlUG5nKG5ldyBVaW50OEFycmF5KGF3YWl0IGJsb2JUb0FycmF5QnVmZmVyKGJsb2IpKSk7XG4gIGNvbnN0IG1ldGFkYXRhQ2h1bmsgPSBjaHVua3MuZmluZCgoY2h1bmspID0+IGNodW5rLm5hbWUgPT09IFwidEVYdFwiKTtcbiAgaWYgKG1ldGFkYXRhQ2h1bmspIHtcbiAgICByZXR1cm4gdEVYdC5kZWNvZGUobWV0YWRhdGFDaHVuay5kYXRhKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBlbmNvZGVQbmdNZXRhZGF0YSA9IGFzeW5jICh7XG4gIGJsb2IsXG4gIG1ldGFkYXRhLFxufToge1xuICBibG9iOiBCbG9iO1xuICBtZXRhZGF0YTogc3RyaW5nO1xufSkgPT4ge1xuICBjb25zdCBjaHVua3MgPSBkZWNvZGVQbmcobmV3IFVpbnQ4QXJyYXkoYXdhaXQgYmxvYlRvQXJyYXlCdWZmZXIoYmxvYikpKTtcblxuICBjb25zdCBtZXRhZGF0YUNodW5rID0gdEVYdC5lbmNvZGUoXG4gICAgTUlNRV9UWVBFUy5leGNhbGlkcmF3LFxuICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgYXdhaXQgZW5jb2RlKHtcbiAgICAgICAgdGV4dDogbWV0YWRhdGEsXG4gICAgICAgIGNvbXByZXNzOiB0cnVlLFxuICAgICAgfSksXG4gICAgKSxcbiAgKTtcbiAgLy8gaW5zZXJ0IG1ldGFkYXRhIGJlZm9yZSBsYXN0IGNodW5rIChpRU5EKVxuICBjaHVua3Muc3BsaWNlKC0xLCAwLCBtZXRhZGF0YUNodW5rKTtcblxuICByZXR1cm4gbmV3IEJsb2IoW2VuY29kZVBuZyhjaHVua3MpXSwgeyB0eXBlOiBNSU1FX1RZUEVTLnBuZyB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWNvZGVQbmdNZXRhZGF0YSA9IGFzeW5jIChibG9iOiBCbG9iKSA9PiB7XG4gIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgZ2V0VEVYdENodW5rKGJsb2IpO1xuICBpZiAobWV0YWRhdGE/LmtleXdvcmQgPT09IE1JTUVfVFlQRVMuZXhjYWxpZHJhdykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBlbmNvZGVkRGF0YSA9IEpTT04ucGFyc2UobWV0YWRhdGEudGV4dCk7XG4gICAgICBpZiAoIShcImVuY29kZWRcIiBpbiBlbmNvZGVkRGF0YSkpIHtcbiAgICAgICAgLy8gbGVnYWN5LCB1bi1lbmNvZGVkIHNjZW5lIEpTT05cbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwidHlwZVwiIGluIGVuY29kZWREYXRhICYmXG4gICAgICAgICAgZW5jb2RlZERhdGEudHlwZSA9PT0gRVhQT1JUX0RBVEFfVFlQRVMuZXhjYWxpZHJhd1xuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gbWV0YWRhdGEudGV4dDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGQUlMRURcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgZGVjb2RlKGVuY29kZWREYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZBSUxFRFwiKTtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSU5WQUxJRFwiKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTVkdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjb25zdCBlbmNvZGVTdmdNZXRhZGF0YSA9IGFzeW5jICh7IHRleHQgfTogeyB0ZXh0OiBzdHJpbmcgfSkgPT4ge1xuICBjb25zdCBiYXNlNjQgPSBhd2FpdCBzdHJpbmdUb0Jhc2U2NChcbiAgICBKU09OLnN0cmluZ2lmeShhd2FpdCBlbmNvZGUoeyB0ZXh0IH0pKSxcbiAgICB0cnVlIC8qIGlzIGFscmVhZHkgYnl0ZSBzdHJpbmcgKi8sXG4gICk7XG5cbiAgbGV0IG1ldGFkYXRhID0gXCJcIjtcbiAgbWV0YWRhdGEgKz0gYDwhLS0gcGF5bG9hZC10eXBlOiR7TUlNRV9UWVBFUy5leGNhbGlkcmF3fSAtLT5gO1xuICBtZXRhZGF0YSArPSBgPCEtLSBwYXlsb2FkLXZlcnNpb246MiAtLT5gO1xuICBtZXRhZGF0YSArPSBcIjwhLS0gcGF5bG9hZC1zdGFydCAtLT5cIjtcbiAgbWV0YWRhdGEgKz0gYmFzZTY0O1xuICBtZXRhZGF0YSArPSBcIjwhLS0gcGF5bG9hZC1lbmQgLS0+XCI7XG4gIHJldHVybiBtZXRhZGF0YTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWNvZGVTdmdNZXRhZGF0YSA9IGFzeW5jICh7IHN2ZyB9OiB7IHN2Zzogc3RyaW5nIH0pID0+IHtcbiAgaWYgKHN2Zy5pbmNsdWRlcyhgcGF5bG9hZC10eXBlOiR7TUlNRV9UWVBFUy5leGNhbGlkcmF3fWApKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzdmcubWF0Y2goLzwhLS0gcGF5bG9hZC1zdGFydCAtLT4oLis/KTwhLS0gcGF5bG9hZC1lbmQgLS0+Lyk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSU5WQUxJRFwiKTtcbiAgICB9XG4gICAgY29uc3QgdmVyc2lvbk1hdGNoID0gc3ZnLm1hdGNoKC88IS0tIHBheWxvYWQtdmVyc2lvbjooXFxkKykgLS0+Lyk7XG4gICAgY29uc3QgdmVyc2lvbiA9IHZlcnNpb25NYXRjaD8uWzFdIHx8IFwiMVwiO1xuICAgIGNvbnN0IGlzQnl0ZVN0cmluZyA9IHZlcnNpb24gIT09IFwiMVwiO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCBiYXNlNjRUb1N0cmluZyhtYXRjaFsxXSwgaXNCeXRlU3RyaW5nKTtcbiAgICAgIGNvbnN0IGVuY29kZWREYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgIGlmICghKFwiZW5jb2RlZFwiIGluIGVuY29kZWREYXRhKSkge1xuICAgICAgICAvLyBsZWdhY3ksIHVuLWVuY29kZWQgc2NlbmUgSlNPTlxuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJ0eXBlXCIgaW4gZW5jb2RlZERhdGEgJiZcbiAgICAgICAgICBlbmNvZGVkRGF0YS50eXBlID09PSBFWFBPUlRfREFUQV9UWVBFUy5leGNhbGlkcmF3XG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZBSUxFRFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCBkZWNvZGUoZW5jb2RlZERhdGEpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRkFJTEVEXCIpO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJJTlZBTElEXCIpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../data/image.ts\n");

/***/ })

}]);